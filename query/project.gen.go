// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"k8s-deploy/model"
)

func newProjectModel(db *gorm.DB, opts ...gen.DOOption) projectModel {
	_projectModel := projectModel{}

	_projectModel.projectModelDo.UseDB(db, opts...)
	_projectModel.projectModelDo.UseModel(&model.ProjectModel{})

	tableName := _projectModel.projectModelDo.TableName()
	_projectModel.ALL = field.NewAsterisk(tableName)
	_projectModel.ID = field.NewInt(tableName, "id")
	_projectModel.Name = field.NewString(tableName, "name")
	_projectModel.Desc = field.NewString(tableName, "desc")
	_projectModel.Git = field.NewString(tableName, "git")
	_projectModel.Token = field.NewString(tableName, "token")
	_projectModel.UseTag = field.NewInt(tableName, "use_tag")
	_projectModel.CreateTime = field.NewTime(tableName, "create_time")
	_projectModel.UpdateTime = field.NewTime(tableName, "update_time")
	_projectModel.DeleteTime = field.NewField(tableName, "delete_time")

	_projectModel.fillFieldMap()

	return _projectModel
}

// projectModel 项目表
type projectModel struct {
	projectModelDo projectModelDo

	ALL        field.Asterisk
	ID         field.Int
	Name       field.String // 项目名
	Desc       field.String // 项目描述
	Git        field.String // git地址
	Token      field.String // 令牌
	UseTag     field.Int    // 是否使用 TAG
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Field

	fieldMap map[string]field.Expr
}

func (p projectModel) Table(newTableName string) *projectModel {
	p.projectModelDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectModel) As(alias string) *projectModel {
	p.projectModelDo.DO = *(p.projectModelDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectModel) updateTableName(table string) *projectModel {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt(table, "id")
	p.Name = field.NewString(table, "name")
	p.Desc = field.NewString(table, "desc")
	p.Git = field.NewString(table, "git")
	p.Token = field.NewString(table, "token")
	p.UseTag = field.NewInt(table, "use_tag")
	p.CreateTime = field.NewTime(table, "create_time")
	p.UpdateTime = field.NewTime(table, "update_time")
	p.DeleteTime = field.NewField(table, "delete_time")

	p.fillFieldMap()

	return p
}

func (p *projectModel) WithContext(ctx context.Context) IProjectModelDo {
	return p.projectModelDo.WithContext(ctx)
}

func (p projectModel) TableName() string { return p.projectModelDo.TableName() }

func (p projectModel) Alias() string { return p.projectModelDo.Alias() }

func (p projectModel) Columns(cols ...field.Expr) gen.Columns {
	return p.projectModelDo.Columns(cols...)
}

func (p *projectModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectModel) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 9)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["desc"] = p.Desc
	p.fieldMap["git"] = p.Git
	p.fieldMap["token"] = p.Token
	p.fieldMap["use_tag"] = p.UseTag
	p.fieldMap["create_time"] = p.CreateTime
	p.fieldMap["update_time"] = p.UpdateTime
	p.fieldMap["delete_time"] = p.DeleteTime
}

func (p projectModel) clone(db *gorm.DB) projectModel {
	p.projectModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectModel) replaceDB(db *gorm.DB) projectModel {
	p.projectModelDo.ReplaceDB(db)
	return p
}

type projectModelDo struct{ gen.DO }

type IProjectModelDo interface {
	gen.SubQuery
	Debug() IProjectModelDo
	WithContext(ctx context.Context) IProjectModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectModelDo
	WriteDB() IProjectModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectModelDo
	Not(conds ...gen.Condition) IProjectModelDo
	Or(conds ...gen.Condition) IProjectModelDo
	Select(conds ...field.Expr) IProjectModelDo
	Where(conds ...gen.Condition) IProjectModelDo
	Order(conds ...field.Expr) IProjectModelDo
	Distinct(cols ...field.Expr) IProjectModelDo
	Omit(cols ...field.Expr) IProjectModelDo
	Join(table schema.Tabler, on ...field.Expr) IProjectModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectModelDo
	Group(cols ...field.Expr) IProjectModelDo
	Having(conds ...gen.Condition) IProjectModelDo
	Limit(limit int) IProjectModelDo
	Offset(offset int) IProjectModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectModelDo
	Unscoped() IProjectModelDo
	Create(values ...*model.ProjectModel) error
	CreateInBatches(values []*model.ProjectModel, batchSize int) error
	Save(values ...*model.ProjectModel) error
	First() (*model.ProjectModel, error)
	Take() (*model.ProjectModel, error)
	Last() (*model.ProjectModel, error)
	Find() ([]*model.ProjectModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectModel, err error)
	FindInBatches(result *[]*model.ProjectModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectModelDo
	Assign(attrs ...field.AssignExpr) IProjectModelDo
	Joins(fields ...field.RelationField) IProjectModelDo
	Preload(fields ...field.RelationField) IProjectModelDo
	FirstOrInit() (*model.ProjectModel, error)
	FirstOrCreate() (*model.ProjectModel, error)
	FindByPage(offset int, limit int) (result []*model.ProjectModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectModelDo) Debug() IProjectModelDo {
	return p.withDO(p.DO.Debug())
}

func (p projectModelDo) WithContext(ctx context.Context) IProjectModelDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectModelDo) ReadDB() IProjectModelDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectModelDo) WriteDB() IProjectModelDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectModelDo) Session(config *gorm.Session) IProjectModelDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectModelDo) Clauses(conds ...clause.Expression) IProjectModelDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectModelDo) Returning(value interface{}, columns ...string) IProjectModelDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectModelDo) Not(conds ...gen.Condition) IProjectModelDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectModelDo) Or(conds ...gen.Condition) IProjectModelDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectModelDo) Select(conds ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectModelDo) Where(conds ...gen.Condition) IProjectModelDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectModelDo) Order(conds ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectModelDo) Distinct(cols ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectModelDo) Omit(cols ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectModelDo) Join(table schema.Tabler, on ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectModelDo) Group(cols ...field.Expr) IProjectModelDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectModelDo) Having(conds ...gen.Condition) IProjectModelDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectModelDo) Limit(limit int) IProjectModelDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectModelDo) Offset(offset int) IProjectModelDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectModelDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectModelDo) Unscoped() IProjectModelDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectModelDo) Create(values ...*model.ProjectModel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectModelDo) CreateInBatches(values []*model.ProjectModel, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectModelDo) Save(values ...*model.ProjectModel) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectModelDo) First() (*model.ProjectModel, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectModel), nil
	}
}

func (p projectModelDo) Take() (*model.ProjectModel, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectModel), nil
	}
}

func (p projectModelDo) Last() (*model.ProjectModel, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectModel), nil
	}
}

func (p projectModelDo) Find() ([]*model.ProjectModel, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectModel), err
}

func (p projectModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectModel, err error) {
	buf := make([]*model.ProjectModel, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectModelDo) FindInBatches(result *[]*model.ProjectModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectModelDo) Attrs(attrs ...field.AssignExpr) IProjectModelDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectModelDo) Assign(attrs ...field.AssignExpr) IProjectModelDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectModelDo) Joins(fields ...field.RelationField) IProjectModelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectModelDo) Preload(fields ...field.RelationField) IProjectModelDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectModelDo) FirstOrInit() (*model.ProjectModel, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectModel), nil
	}
}

func (p projectModelDo) FirstOrCreate() (*model.ProjectModel, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectModel), nil
	}
}

func (p projectModelDo) FindByPage(offset int, limit int) (result []*model.ProjectModel, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectModelDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectModelDo) Delete(models ...*model.ProjectModel) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectModelDo) withDO(do gen.Dao) *projectModelDo {
	p.DO = *do.(*gen.DO)
	return p
}
