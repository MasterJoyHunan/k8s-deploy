// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"k8s-deploy/model"
)

func newK8sTemplateModel(db *gorm.DB, opts ...gen.DOOption) k8sTemplateModel {
	_k8sTemplateModel := k8sTemplateModel{}

	_k8sTemplateModel.k8sTemplateModelDo.UseDB(db, opts...)
	_k8sTemplateModel.k8sTemplateModelDo.UseModel(&model.K8sTemplateModel{})

	tableName := _k8sTemplateModel.k8sTemplateModelDo.TableName()
	_k8sTemplateModel.ALL = field.NewAsterisk(tableName)
	_k8sTemplateModel.ID = field.NewInt(tableName, "id")
	_k8sTemplateModel.Name = field.NewString(tableName, "name")
	_k8sTemplateModel.Desc = field.NewString(tableName, "desc")
	_k8sTemplateModel.Content = field.NewString(tableName, "content")
	_k8sTemplateModel.CreateTime = field.NewTime(tableName, "create_time")
	_k8sTemplateModel.UpdateTime = field.NewTime(tableName, "update_time")
	_k8sTemplateModel.DeleteTime = field.NewField(tableName, "delete_time")

	_k8sTemplateModel.fillFieldMap()

	return _k8sTemplateModel
}

// k8sTemplateModel 模板管理
type k8sTemplateModel struct {
	k8sTemplateModelDo k8sTemplateModelDo

	ALL        field.Asterisk
	ID         field.Int
	Name       field.String // 模板名
	Desc       field.String // 模板描述
	Content    field.String // 模板内容
	CreateTime field.Time
	UpdateTime field.Time
	DeleteTime field.Field

	fieldMap map[string]field.Expr
}

func (k k8sTemplateModel) Table(newTableName string) *k8sTemplateModel {
	k.k8sTemplateModelDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k k8sTemplateModel) As(alias string) *k8sTemplateModel {
	k.k8sTemplateModelDo.DO = *(k.k8sTemplateModelDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *k8sTemplateModel) updateTableName(table string) *k8sTemplateModel {
	k.ALL = field.NewAsterisk(table)
	k.ID = field.NewInt(table, "id")
	k.Name = field.NewString(table, "name")
	k.Desc = field.NewString(table, "desc")
	k.Content = field.NewString(table, "content")
	k.CreateTime = field.NewTime(table, "create_time")
	k.UpdateTime = field.NewTime(table, "update_time")
	k.DeleteTime = field.NewField(table, "delete_time")

	k.fillFieldMap()

	return k
}

func (k *k8sTemplateModel) WithContext(ctx context.Context) IK8sTemplateModelDo {
	return k.k8sTemplateModelDo.WithContext(ctx)
}

func (k k8sTemplateModel) TableName() string { return k.k8sTemplateModelDo.TableName() }

func (k k8sTemplateModel) Alias() string { return k.k8sTemplateModelDo.Alias() }

func (k k8sTemplateModel) Columns(cols ...field.Expr) gen.Columns {
	return k.k8sTemplateModelDo.Columns(cols...)
}

func (k *k8sTemplateModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *k8sTemplateModel) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 7)
	k.fieldMap["id"] = k.ID
	k.fieldMap["name"] = k.Name
	k.fieldMap["desc"] = k.Desc
	k.fieldMap["content"] = k.Content
	k.fieldMap["create_time"] = k.CreateTime
	k.fieldMap["update_time"] = k.UpdateTime
	k.fieldMap["delete_time"] = k.DeleteTime
}

func (k k8sTemplateModel) clone(db *gorm.DB) k8sTemplateModel {
	k.k8sTemplateModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k k8sTemplateModel) replaceDB(db *gorm.DB) k8sTemplateModel {
	k.k8sTemplateModelDo.ReplaceDB(db)
	return k
}

type k8sTemplateModelDo struct{ gen.DO }

type IK8sTemplateModelDo interface {
	gen.SubQuery
	Debug() IK8sTemplateModelDo
	WithContext(ctx context.Context) IK8sTemplateModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IK8sTemplateModelDo
	WriteDB() IK8sTemplateModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IK8sTemplateModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IK8sTemplateModelDo
	Not(conds ...gen.Condition) IK8sTemplateModelDo
	Or(conds ...gen.Condition) IK8sTemplateModelDo
	Select(conds ...field.Expr) IK8sTemplateModelDo
	Where(conds ...gen.Condition) IK8sTemplateModelDo
	Order(conds ...field.Expr) IK8sTemplateModelDo
	Distinct(cols ...field.Expr) IK8sTemplateModelDo
	Omit(cols ...field.Expr) IK8sTemplateModelDo
	Join(table schema.Tabler, on ...field.Expr) IK8sTemplateModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IK8sTemplateModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IK8sTemplateModelDo
	Group(cols ...field.Expr) IK8sTemplateModelDo
	Having(conds ...gen.Condition) IK8sTemplateModelDo
	Limit(limit int) IK8sTemplateModelDo
	Offset(offset int) IK8sTemplateModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IK8sTemplateModelDo
	Unscoped() IK8sTemplateModelDo
	Create(values ...*model.K8sTemplateModel) error
	CreateInBatches(values []*model.K8sTemplateModel, batchSize int) error
	Save(values ...*model.K8sTemplateModel) error
	First() (*model.K8sTemplateModel, error)
	Take() (*model.K8sTemplateModel, error)
	Last() (*model.K8sTemplateModel, error)
	Find() ([]*model.K8sTemplateModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.K8sTemplateModel, err error)
	FindInBatches(result *[]*model.K8sTemplateModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.K8sTemplateModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IK8sTemplateModelDo
	Assign(attrs ...field.AssignExpr) IK8sTemplateModelDo
	Joins(fields ...field.RelationField) IK8sTemplateModelDo
	Preload(fields ...field.RelationField) IK8sTemplateModelDo
	FirstOrInit() (*model.K8sTemplateModel, error)
	FirstOrCreate() (*model.K8sTemplateModel, error)
	FindByPage(offset int, limit int) (result []*model.K8sTemplateModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IK8sTemplateModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (k k8sTemplateModelDo) Debug() IK8sTemplateModelDo {
	return k.withDO(k.DO.Debug())
}

func (k k8sTemplateModelDo) WithContext(ctx context.Context) IK8sTemplateModelDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k k8sTemplateModelDo) ReadDB() IK8sTemplateModelDo {
	return k.Clauses(dbresolver.Read)
}

func (k k8sTemplateModelDo) WriteDB() IK8sTemplateModelDo {
	return k.Clauses(dbresolver.Write)
}

func (k k8sTemplateModelDo) Session(config *gorm.Session) IK8sTemplateModelDo {
	return k.withDO(k.DO.Session(config))
}

func (k k8sTemplateModelDo) Clauses(conds ...clause.Expression) IK8sTemplateModelDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k k8sTemplateModelDo) Returning(value interface{}, columns ...string) IK8sTemplateModelDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k k8sTemplateModelDo) Not(conds ...gen.Condition) IK8sTemplateModelDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k k8sTemplateModelDo) Or(conds ...gen.Condition) IK8sTemplateModelDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k k8sTemplateModelDo) Select(conds ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k k8sTemplateModelDo) Where(conds ...gen.Condition) IK8sTemplateModelDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k k8sTemplateModelDo) Order(conds ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k k8sTemplateModelDo) Distinct(cols ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k k8sTemplateModelDo) Omit(cols ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k k8sTemplateModelDo) Join(table schema.Tabler, on ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k k8sTemplateModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k k8sTemplateModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k k8sTemplateModelDo) Group(cols ...field.Expr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k k8sTemplateModelDo) Having(conds ...gen.Condition) IK8sTemplateModelDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k k8sTemplateModelDo) Limit(limit int) IK8sTemplateModelDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k k8sTemplateModelDo) Offset(offset int) IK8sTemplateModelDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k k8sTemplateModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IK8sTemplateModelDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k k8sTemplateModelDo) Unscoped() IK8sTemplateModelDo {
	return k.withDO(k.DO.Unscoped())
}

func (k k8sTemplateModelDo) Create(values ...*model.K8sTemplateModel) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k k8sTemplateModelDo) CreateInBatches(values []*model.K8sTemplateModel, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k k8sTemplateModelDo) Save(values ...*model.K8sTemplateModel) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k k8sTemplateModelDo) First() (*model.K8sTemplateModel, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.K8sTemplateModel), nil
	}
}

func (k k8sTemplateModelDo) Take() (*model.K8sTemplateModel, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.K8sTemplateModel), nil
	}
}

func (k k8sTemplateModelDo) Last() (*model.K8sTemplateModel, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.K8sTemplateModel), nil
	}
}

func (k k8sTemplateModelDo) Find() ([]*model.K8sTemplateModel, error) {
	result, err := k.DO.Find()
	return result.([]*model.K8sTemplateModel), err
}

func (k k8sTemplateModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.K8sTemplateModel, err error) {
	buf := make([]*model.K8sTemplateModel, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k k8sTemplateModelDo) FindInBatches(result *[]*model.K8sTemplateModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k k8sTemplateModelDo) Attrs(attrs ...field.AssignExpr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k k8sTemplateModelDo) Assign(attrs ...field.AssignExpr) IK8sTemplateModelDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k k8sTemplateModelDo) Joins(fields ...field.RelationField) IK8sTemplateModelDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k k8sTemplateModelDo) Preload(fields ...field.RelationField) IK8sTemplateModelDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k k8sTemplateModelDo) FirstOrInit() (*model.K8sTemplateModel, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.K8sTemplateModel), nil
	}
}

func (k k8sTemplateModelDo) FirstOrCreate() (*model.K8sTemplateModel, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.K8sTemplateModel), nil
	}
}

func (k k8sTemplateModelDo) FindByPage(offset int, limit int) (result []*model.K8sTemplateModel, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k k8sTemplateModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k k8sTemplateModelDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k k8sTemplateModelDo) Delete(models ...*model.K8sTemplateModel) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *k8sTemplateModelDo) withDO(do gen.Dao) *k8sTemplateModelDo {
	k.DO = *do.(*gen.DO)
	return k
}
