// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"k8s-deploy/model"
)

func newDeployLogModel(db *gorm.DB, opts ...gen.DOOption) deployLogModel {
	_deployLogModel := deployLogModel{}

	_deployLogModel.deployLogModelDo.UseDB(db, opts...)
	_deployLogModel.deployLogModelDo.UseModel(&model.DeployLogModel{})

	tableName := _deployLogModel.deployLogModelDo.TableName()
	_deployLogModel.ALL = field.NewAsterisk(tableName)
	_deployLogModel.ID = field.NewInt(tableName, "id")
	_deployLogModel.Pid = field.NewInt(tableName, "pid")
	_deployLogModel.Type = field.NewInt(tableName, "type")
	_deployLogModel.Message = field.NewString(tableName, "message")
	_deployLogModel.CreateTime = field.NewTime(tableName, "create_time")

	_deployLogModel.fillFieldMap()

	return _deployLogModel
}

// deployLogModel 部署日志
type deployLogModel struct {
	deployLogModelDo deployLogModelDo

	ALL        field.Asterisk
	ID         field.Int
	Pid        field.Int    // 部署ID
	Type       field.Int    // 消息登记 0：默认 1：成功 2：警告 3：错误
	Message    field.String // 消息
	CreateTime field.Time   // 时间

	fieldMap map[string]field.Expr
}

func (d deployLogModel) Table(newTableName string) *deployLogModel {
	d.deployLogModelDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployLogModel) As(alias string) *deployLogModel {
	d.deployLogModelDo.DO = *(d.deployLogModelDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployLogModel) updateTableName(table string) *deployLogModel {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt(table, "id")
	d.Pid = field.NewInt(table, "pid")
	d.Type = field.NewInt(table, "type")
	d.Message = field.NewString(table, "message")
	d.CreateTime = field.NewTime(table, "create_time")

	d.fillFieldMap()

	return d
}

func (d *deployLogModel) WithContext(ctx context.Context) IDeployLogModelDo {
	return d.deployLogModelDo.WithContext(ctx)
}

func (d deployLogModel) TableName() string { return d.deployLogModelDo.TableName() }

func (d deployLogModel) Alias() string { return d.deployLogModelDo.Alias() }

func (d deployLogModel) Columns(cols ...field.Expr) gen.Columns {
	return d.deployLogModelDo.Columns(cols...)
}

func (d *deployLogModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployLogModel) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 5)
	d.fieldMap["id"] = d.ID
	d.fieldMap["pid"] = d.Pid
	d.fieldMap["type"] = d.Type
	d.fieldMap["message"] = d.Message
	d.fieldMap["create_time"] = d.CreateTime
}

func (d deployLogModel) clone(db *gorm.DB) deployLogModel {
	d.deployLogModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployLogModel) replaceDB(db *gorm.DB) deployLogModel {
	d.deployLogModelDo.ReplaceDB(db)
	return d
}

type deployLogModelDo struct{ gen.DO }

type IDeployLogModelDo interface {
	gen.SubQuery
	Debug() IDeployLogModelDo
	WithContext(ctx context.Context) IDeployLogModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployLogModelDo
	WriteDB() IDeployLogModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployLogModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployLogModelDo
	Not(conds ...gen.Condition) IDeployLogModelDo
	Or(conds ...gen.Condition) IDeployLogModelDo
	Select(conds ...field.Expr) IDeployLogModelDo
	Where(conds ...gen.Condition) IDeployLogModelDo
	Order(conds ...field.Expr) IDeployLogModelDo
	Distinct(cols ...field.Expr) IDeployLogModelDo
	Omit(cols ...field.Expr) IDeployLogModelDo
	Join(table schema.Tabler, on ...field.Expr) IDeployLogModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployLogModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployLogModelDo
	Group(cols ...field.Expr) IDeployLogModelDo
	Having(conds ...gen.Condition) IDeployLogModelDo
	Limit(limit int) IDeployLogModelDo
	Offset(offset int) IDeployLogModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployLogModelDo
	Unscoped() IDeployLogModelDo
	Create(values ...*model.DeployLogModel) error
	CreateInBatches(values []*model.DeployLogModel, batchSize int) error
	Save(values ...*model.DeployLogModel) error
	First() (*model.DeployLogModel, error)
	Take() (*model.DeployLogModel, error)
	Last() (*model.DeployLogModel, error)
	Find() ([]*model.DeployLogModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployLogModel, err error)
	FindInBatches(result *[]*model.DeployLogModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployLogModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployLogModelDo
	Assign(attrs ...field.AssignExpr) IDeployLogModelDo
	Joins(fields ...field.RelationField) IDeployLogModelDo
	Preload(fields ...field.RelationField) IDeployLogModelDo
	FirstOrInit() (*model.DeployLogModel, error)
	FirstOrCreate() (*model.DeployLogModel, error)
	FindByPage(offset int, limit int) (result []*model.DeployLogModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployLogModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployLogModelDo) Debug() IDeployLogModelDo {
	return d.withDO(d.DO.Debug())
}

func (d deployLogModelDo) WithContext(ctx context.Context) IDeployLogModelDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployLogModelDo) ReadDB() IDeployLogModelDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployLogModelDo) WriteDB() IDeployLogModelDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployLogModelDo) Session(config *gorm.Session) IDeployLogModelDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployLogModelDo) Clauses(conds ...clause.Expression) IDeployLogModelDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployLogModelDo) Returning(value interface{}, columns ...string) IDeployLogModelDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployLogModelDo) Not(conds ...gen.Condition) IDeployLogModelDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployLogModelDo) Or(conds ...gen.Condition) IDeployLogModelDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployLogModelDo) Select(conds ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployLogModelDo) Where(conds ...gen.Condition) IDeployLogModelDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployLogModelDo) Order(conds ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployLogModelDo) Distinct(cols ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployLogModelDo) Omit(cols ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployLogModelDo) Join(table schema.Tabler, on ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployLogModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployLogModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployLogModelDo) Group(cols ...field.Expr) IDeployLogModelDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployLogModelDo) Having(conds ...gen.Condition) IDeployLogModelDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployLogModelDo) Limit(limit int) IDeployLogModelDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployLogModelDo) Offset(offset int) IDeployLogModelDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployLogModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployLogModelDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployLogModelDo) Unscoped() IDeployLogModelDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployLogModelDo) Create(values ...*model.DeployLogModel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployLogModelDo) CreateInBatches(values []*model.DeployLogModel, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployLogModelDo) Save(values ...*model.DeployLogModel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployLogModelDo) First() (*model.DeployLogModel, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployLogModel), nil
	}
}

func (d deployLogModelDo) Take() (*model.DeployLogModel, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployLogModel), nil
	}
}

func (d deployLogModelDo) Last() (*model.DeployLogModel, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployLogModel), nil
	}
}

func (d deployLogModelDo) Find() ([]*model.DeployLogModel, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployLogModel), err
}

func (d deployLogModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployLogModel, err error) {
	buf := make([]*model.DeployLogModel, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployLogModelDo) FindInBatches(result *[]*model.DeployLogModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployLogModelDo) Attrs(attrs ...field.AssignExpr) IDeployLogModelDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployLogModelDo) Assign(attrs ...field.AssignExpr) IDeployLogModelDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployLogModelDo) Joins(fields ...field.RelationField) IDeployLogModelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployLogModelDo) Preload(fields ...field.RelationField) IDeployLogModelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployLogModelDo) FirstOrInit() (*model.DeployLogModel, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployLogModel), nil
	}
}

func (d deployLogModelDo) FirstOrCreate() (*model.DeployLogModel, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployLogModel), nil
	}
}

func (d deployLogModelDo) FindByPage(offset int, limit int) (result []*model.DeployLogModel, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployLogModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployLogModelDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployLogModelDo) Delete(models ...*model.DeployLogModel) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployLogModelDo) withDO(do gen.Dao) *deployLogModelDo {
	d.DO = *do.(*gen.DO)
	return d
}
