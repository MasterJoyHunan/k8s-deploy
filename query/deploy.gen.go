// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"k8s-deploy/model"
)

func newDeployModel(db *gorm.DB, opts ...gen.DOOption) deployModel {
	_deployModel := deployModel{}

	_deployModel.deployModelDo.UseDB(db, opts...)
	_deployModel.deployModelDo.UseModel(&model.DeployModel{})

	tableName := _deployModel.deployModelDo.TableName()
	_deployModel.ALL = field.NewAsterisk(tableName)
	_deployModel.ID = field.NewInt(tableName, "id")
	_deployModel.Name = field.NewString(tableName, "name")
	_deployModel.ProjectID = field.NewInt(tableName, "project_id")
	_deployModel.Project = field.NewString(tableName, "project")
	_deployModel.TemplateID = field.NewInt(tableName, "template_id")
	_deployModel.Template = field.NewString(tableName, "template")
	_deployModel.TemplateParse = field.NewString(tableName, "template_parse")
	_deployModel.Params = field.NewString(tableName, "params")
	_deployModel.Status = field.NewInt(tableName, "status")
	_deployModel.CreateTime = field.NewTime(tableName, "create_time")
	_deployModel.UpdateTime = field.NewTime(tableName, "update_time")
	_deployModel.DeleteTime = field.NewField(tableName, "delete_time")

	_deployModel.fillFieldMap()

	return _deployModel
}

type deployModel struct {
	deployModelDo deployModelDo

	ALL           field.Asterisk
	ID            field.Int
	Name          field.String // 部署标题
	ProjectID     field.Int    // 项目ID
	Project       field.String // 项目
	TemplateID    field.Int    // 项目模板
	Template      field.String // 模板
	TemplateParse field.String // 模板解析
	Params        field.String // 模板变量
	Status        field.Int    // 状态
	CreateTime    field.Time
	UpdateTime    field.Time
	DeleteTime    field.Field

	fieldMap map[string]field.Expr
}

func (d deployModel) Table(newTableName string) *deployModel {
	d.deployModelDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d deployModel) As(alias string) *deployModel {
	d.deployModelDo.DO = *(d.deployModelDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *deployModel) updateTableName(table string) *deployModel {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt(table, "id")
	d.Name = field.NewString(table, "name")
	d.ProjectID = field.NewInt(table, "project_id")
	d.Project = field.NewString(table, "project")
	d.TemplateID = field.NewInt(table, "template_id")
	d.Template = field.NewString(table, "template")
	d.TemplateParse = field.NewString(table, "template_parse")
	d.Params = field.NewString(table, "params")
	d.Status = field.NewInt(table, "status")
	d.CreateTime = field.NewTime(table, "create_time")
	d.UpdateTime = field.NewTime(table, "update_time")
	d.DeleteTime = field.NewField(table, "delete_time")

	d.fillFieldMap()

	return d
}

func (d *deployModel) WithContext(ctx context.Context) IDeployModelDo {
	return d.deployModelDo.WithContext(ctx)
}

func (d deployModel) TableName() string { return d.deployModelDo.TableName() }

func (d deployModel) Alias() string { return d.deployModelDo.Alias() }

func (d deployModel) Columns(cols ...field.Expr) gen.Columns { return d.deployModelDo.Columns(cols...) }

func (d *deployModel) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *deployModel) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["project_id"] = d.ProjectID
	d.fieldMap["project"] = d.Project
	d.fieldMap["template_id"] = d.TemplateID
	d.fieldMap["template"] = d.Template
	d.fieldMap["template_parse"] = d.TemplateParse
	d.fieldMap["params"] = d.Params
	d.fieldMap["status"] = d.Status
	d.fieldMap["create_time"] = d.CreateTime
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["delete_time"] = d.DeleteTime
}

func (d deployModel) clone(db *gorm.DB) deployModel {
	d.deployModelDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d deployModel) replaceDB(db *gorm.DB) deployModel {
	d.deployModelDo.ReplaceDB(db)
	return d
}

type deployModelDo struct{ gen.DO }

type IDeployModelDo interface {
	gen.SubQuery
	Debug() IDeployModelDo
	WithContext(ctx context.Context) IDeployModelDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDeployModelDo
	WriteDB() IDeployModelDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDeployModelDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDeployModelDo
	Not(conds ...gen.Condition) IDeployModelDo
	Or(conds ...gen.Condition) IDeployModelDo
	Select(conds ...field.Expr) IDeployModelDo
	Where(conds ...gen.Condition) IDeployModelDo
	Order(conds ...field.Expr) IDeployModelDo
	Distinct(cols ...field.Expr) IDeployModelDo
	Omit(cols ...field.Expr) IDeployModelDo
	Join(table schema.Tabler, on ...field.Expr) IDeployModelDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDeployModelDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDeployModelDo
	Group(cols ...field.Expr) IDeployModelDo
	Having(conds ...gen.Condition) IDeployModelDo
	Limit(limit int) IDeployModelDo
	Offset(offset int) IDeployModelDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployModelDo
	Unscoped() IDeployModelDo
	Create(values ...*model.DeployModel) error
	CreateInBatches(values []*model.DeployModel, batchSize int) error
	Save(values ...*model.DeployModel) error
	First() (*model.DeployModel, error)
	Take() (*model.DeployModel, error)
	Last() (*model.DeployModel, error)
	Find() ([]*model.DeployModel, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployModel, err error)
	FindInBatches(result *[]*model.DeployModel, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DeployModel) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDeployModelDo
	Assign(attrs ...field.AssignExpr) IDeployModelDo
	Joins(fields ...field.RelationField) IDeployModelDo
	Preload(fields ...field.RelationField) IDeployModelDo
	FirstOrInit() (*model.DeployModel, error)
	FirstOrCreate() (*model.DeployModel, error)
	FindByPage(offset int, limit int) (result []*model.DeployModel, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDeployModelDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d deployModelDo) Debug() IDeployModelDo {
	return d.withDO(d.DO.Debug())
}

func (d deployModelDo) WithContext(ctx context.Context) IDeployModelDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deployModelDo) ReadDB() IDeployModelDo {
	return d.Clauses(dbresolver.Read)
}

func (d deployModelDo) WriteDB() IDeployModelDo {
	return d.Clauses(dbresolver.Write)
}

func (d deployModelDo) Session(config *gorm.Session) IDeployModelDo {
	return d.withDO(d.DO.Session(config))
}

func (d deployModelDo) Clauses(conds ...clause.Expression) IDeployModelDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deployModelDo) Returning(value interface{}, columns ...string) IDeployModelDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deployModelDo) Not(conds ...gen.Condition) IDeployModelDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deployModelDo) Or(conds ...gen.Condition) IDeployModelDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deployModelDo) Select(conds ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deployModelDo) Where(conds ...gen.Condition) IDeployModelDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deployModelDo) Order(conds ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deployModelDo) Distinct(cols ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deployModelDo) Omit(cols ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deployModelDo) Join(table schema.Tabler, on ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deployModelDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deployModelDo) RightJoin(table schema.Tabler, on ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deployModelDo) Group(cols ...field.Expr) IDeployModelDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deployModelDo) Having(conds ...gen.Condition) IDeployModelDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deployModelDo) Limit(limit int) IDeployModelDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deployModelDo) Offset(offset int) IDeployModelDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deployModelDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDeployModelDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deployModelDo) Unscoped() IDeployModelDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deployModelDo) Create(values ...*model.DeployModel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deployModelDo) CreateInBatches(values []*model.DeployModel, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deployModelDo) Save(values ...*model.DeployModel) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deployModelDo) First() (*model.DeployModel, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployModel), nil
	}
}

func (d deployModelDo) Take() (*model.DeployModel, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployModel), nil
	}
}

func (d deployModelDo) Last() (*model.DeployModel, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployModel), nil
	}
}

func (d deployModelDo) Find() ([]*model.DeployModel, error) {
	result, err := d.DO.Find()
	return result.([]*model.DeployModel), err
}

func (d deployModelDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DeployModel, err error) {
	buf := make([]*model.DeployModel, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deployModelDo) FindInBatches(result *[]*model.DeployModel, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deployModelDo) Attrs(attrs ...field.AssignExpr) IDeployModelDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deployModelDo) Assign(attrs ...field.AssignExpr) IDeployModelDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deployModelDo) Joins(fields ...field.RelationField) IDeployModelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deployModelDo) Preload(fields ...field.RelationField) IDeployModelDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deployModelDo) FirstOrInit() (*model.DeployModel, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployModel), nil
	}
}

func (d deployModelDo) FirstOrCreate() (*model.DeployModel, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DeployModel), nil
	}
}

func (d deployModelDo) FindByPage(offset int, limit int) (result []*model.DeployModel, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deployModelDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deployModelDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deployModelDo) Delete(models ...*model.DeployModel) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deployModelDo) withDO(do gen.Dao) *deployModelDo {
	d.DO = *do.(*gen.DO)
	return d
}
